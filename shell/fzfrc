#!/bin/sh
# fzfrc - some cool fzf functions

# don't source this file if fzf is not installed
command -v fzf >/dev/null 2>&1 || return 0

# default fzf options
export FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS} -0 --height '45%' --reverse"
# vi like navigation with J/K
export FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS} --bind 'J:down,K:up,Q:cancel'"

alias clipbd="xclip -r -selection clipboard"
alias devar="unset var"

# cdf [cd fuzzy]: cd from $1 with maxdepth $2 (acts as cf if no arguments are passed)
cdf() {
    if command -v fd >/dev/null; then
        var="$(fd -d "${2:-5}" -td --follow --search-path "${1:-$HOME}" 2>/dev/null | fzf --prompt "cd ")"
    else
        var="$(find -L "${1:-$HOME}" -maxdepth "${2:-5}" -type d -not -path '*/\.*' 2>/dev/null | fzf --prompt "cd ")"
    fi
    [ -n "$var" ] && cd "$var" 2>/dev/null
    devar; return 0
}

alias cf='cdf "$HOME" 5'  # cdf from $HOME
alias ct='cdf /tmp 5'     # cdf from /tmp
alias cr='cdf / 2'        # cdf from /

# ch [cd hidden/here]: cd from current dir including hidden
ch() {
    [ -n "$1" ] && cd "$1" 2>/dev/null && return 0
    if command -v fd >/dev/null; then
        var="$(fd -d5 -td --follow --hidden --exclude '\.git*' 2>/dev/null | fzf --prompt "cd ")"
    else
        var="$(find -L . -maxdepth 5 -type d -not -path '*/\.git*' 2>/dev/null | fzf --prompt "cd ")"
    fi
    [ -n "$var" ] && cd "$var" 2>/dev/null
    devar; return 0
}

# vif [vi fuzzy]: open a file in $EDITOR
vif() {
    [ -n "$1" ] && "$EDITOR" "$1" && return 0
    var="$(fzf --prompt "edit ")"
    [ -n "$var" ] && "$EDITOR" "$var"
    devar; return 0
}

# pdf [pdfuzzy]: open pdf/epub in zathura
if command -v zathura >/dev/null; then
pdf() {
    if command -v fd >/dev/null; then
        fd -e pdf -e epub 2>/dev/null | fzf --prompt "zathura " \
            --bind "enter:execute|zathura {} 2>/dev/null &|,enter:+print-query" >/dev/null
    else
        find . -type f -not -path "*/\.*" -name "*.pdf" -o -name "*.epub" 2>/dev/null | fzf --prompt "zathura " \
            --bind "enter:execute|zathura {} 2>/dev/null &|,enter:+print-query" >/dev/null
    fi
    return 0
}
fi

# fox [fuzzy xdg-open]: open any file with xdg-open
fox() {
    fzf --bind "enter:execute|xdg-open {} 2>/dev/null &|,enter:+print-query" --prompt "xdg-open " >/dev/null
    return 0
}

# hst [history]: search command line history & copy selected
hst() {
    var="$(history | cut -c8- | fzf --multi --tac --prompt "history ")"
    [ -n "$var" ] && echo "$var" | clipbd
    devar; return 0
}

# gifs [git fuzzy show]: git commit browser
gifs() {
    # https://gist.github.com/junegunn/f4fca918e937e6bf5bad
    [ -z "$(git rev-parse --git-dir 2>/dev/null)" ] && return 0

    commit_hash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
    commit_copy="$commit_hash | xclip -r -selection clipboard"
    commit_cout="$commit_hash | xargs -I % sh -c 'git checkout %'"
    commit_view="$commit_hash | xargs -I % sh -c 'git show --color=always % | less -R'"
    commit_word="$commit_hash | xargs -I % sh -c 'git show --color=always --color-words % | less -R'"

    git log --graph --color=always --format="%C(auto)%h%d %s %C(bold black)%cN, %cr" | \
    fzf --ansi --no-sort --reverse --height "100%" --tiebreak "index" \
    --preview "$commit_view" \
    --preview-window "down:65%" \
    --bind "j:down,k:up,Q:cancel" \
    --bind "K:preview-half-page-up" \
    --bind "J:preview-half-page-down" \
    --bind "tab:execute:$commit_word" \
    --bind "ctrl-m:execute:$commit_view" \
    --bind "ctrl-x:execute:$commit_cout" \
    --bind "Y:execute-silent:$commit_copy" \
    --header "[j/k]: down/up [J/K]: scroll preview [Y]: yank hash [Q]: clear/quit [ctrl-x]: checkout [tab]: show --color-words [enter]: show"

    unset commit_hash commit_copy commit_cout commit_view commit_word
    return 0
}

# i use arch btw
if [ -f "/etc/arch-release" ]; then
# pacls [pacman list]: list all installed packages
pacls() {
    var="$(pacman -Qq | fzf --height "100%" --multi --preview "pacman -Si {1}" --preview-window "right:70%" --prompt "pkg ")"
    [ -n "$var" ] && echo "$var" | clipbd
    devar; return 0
}

# pacfd [pacman find]: find a package
pacfd() {
    var="$(pacman -Slq | fzf --height "100%" --multi --preview "pacman -Si {1}" --preview-window "right:70%" --prompt "pkg ")"
    [ -n "$var" ] && echo "$var" | clipbd
    devar; return 0
}

# yayls [yay list]: list all installed AUR packages
yayls() {
    var="$(yay -Qmq | fzf --height "100%" --multi --preview "yay -Si {1}" --preview-window "right:70%" --prompt "pkg ")"
    [ -n "$var" ] && echo "$var" | clipbd
    devar; return 0
}

# yayfd [yay find]: find an AUR package
yayfd() {
    var="$(yay -Slaq | fzf --height "100%" --multi --preview "yay -Si {1}" --preview-window "right:70%" --prompt "pkg ")"
    [ -n "$var" ] && echo "$var" | clipbd
    devar; return 0
}
fi
