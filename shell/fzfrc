#!/bin/sh
# fzfrc - some cool fzf functions

# don't source this file if fzf is not installed
command -v fzf >/dev/null 2>&1 || return 0

# default fzf options
export FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS} -0 --height '45%' --reverse"
# vi like navigation with J/K
export FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS} --bind 'J:down,K:up'"

alias clipbd="xclip -r -selection clipboard"
alias devar="unset var"

# cf [cd fuzzy]: cd from $HOME
cf() {
    [ -n "$1" ] && cd "$1" 2>/dev/null && return 0
    if command -v fd >/dev/null; then
        var="$(fd -d5 -td --follow --search-path ~ 2>/dev/null | fzf --prompt "cd ")"
    else
        var="$(find -L "$HOME" -maxdepth 5 -type d -not -path '*/\.*' 2>/dev/null | fzf --prompt "cd ")"
    fi
    [ -n "$var" ] && cd "$var" 2>/dev/null
    devar; return 0
}

# ch [cd hidden/here]: cd from current dir including hidden
ch() {
    [ -n "$1" ] && cd "$1" 2>/dev/null && return 0
    if command -v fd >/dev/null; then
        var="$(fd -d5 -td --follow --hidden --exclude '\.git*' 2>/dev/null | fzf --prompt "cd ")"
    else
        var="$(find -L . -maxdepth 5 -type d -not -path '*/\.git*' 2>/dev/null | fzf --prompt "cd ")"
    fi
    [ -n "$var" ] && cd "$var" 2>/dev/null
    devar; return 0
}

# vif [vi fuzzy]: open a file in $EDITOR
vif() {
    [ -n "$1" ] && "$EDITOR" "$1" && return 0
    var="$(fzf --prompt "edit ")"
    [ -n "$var" ] && "$EDITOR" "$var"
    devar; return 0
}

# pdf [pdfuzzy]: open pdf/epub in zathura
if command -v zathura >/dev/null; then
pdf() {
    if command -v fd >/dev/null; then
        fd -e pdf -e epub 2>/dev/null | fzf --bind "enter:execute|zathura {} 2>/dev/null &|,enter:+print-query" --prompt "zathura " >/dev/null
    else
        find . -type f -name "*.pdf" -o -name "*.epub" 2>/dev/null | fzf --bind "enter:execute|zathura {} 2>/dev/null &|,enter:+print-query" --prompt "zathura " >/dev/null
    fi
    devar; return 0
}
fi

# fox [fuzzy xdg-open]: open any file with xdg-open
fox() {
    fzf --bind "enter:execute|xdg-open {} 2>/dev/null &|,enter:+print-query" --prompt "xdg-open " >/dev/null
    return 0
}

# hst [history]: search command line history & copy selected
hst() {
    var="$(history | cut -c8- | fzf --multi --tac --prompt "history ")"
    [ -n "$var" ] && echo "$var" | clipbd
    devar; return 0
}

# gifs [git fuzzy show]: git commit browser
gifs() {
    # j/k for down/up, J/K scrolls preview pane, Enter to show diff
    # https://gist.github.com/junegunn/f4fca918e937e6bf5bad
    [ -z "$(git rev-parse --git-dir 2>/dev/null)" ] && return 0
    git log --graph --color=always --format="%C(auto)%h%d %s %C(bold black)%cN, %cr"  | \
    fzf --ansi --no-sort --reverse --height "100%" --tiebreak "index" --preview \
    'f() { set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}"); [ $# -eq 0 ] || git show --color=always "$1"; }; f {}' \
    --preview-window "down:65%" \
    --bind "j:down,k:up" \
    --bind "J:preview-half-page-down,K:preview-half-page-up" \
    --bind "ctrl-m:execute:
            (grep -o '[a-f0-9]\{7\}' | head -1 |
            xargs -I % git show --color=always % | less -R) << 'FZF-EOF'
            {} FZF-EOF"
    return 0
}

# i use arch btw
if [ -f "/etc/arch-release" ]; then
# pacls [pacman list]: list all installed packages
pacls() {
    var="$(pacman -Qq | fzf --height "100%" --multi --preview "pacman -Si {1}" --preview-window "right:70%" --prompt "pkg ")"
    [ -n "$var" ] && echo "$var" | clipbd
    devar; return 0
}

# pacfd [pacman find]: find a package
pacfd() {
    var="$(pacman -Slq | fzf --height "100%" --multi --preview "pacman -Si {1}" --preview-window "right:70%" --prompt "pkg ")"
    [ -n "$var" ] && echo "$var" | clipbd
    devar; return 0
}

# yayls [yay list]: list all installed AUR packages
yayls() {
    var="$(yay -Qmq | fzf --height "100%" --multi --preview "yay -Si {1}" --preview-window "right:70%" --prompt "pkg ")"
    [ -n "$var" ] && echo "$var" | clipbd
    devar; return 0
}

# yayfd [yay find]: find an AUR package
yayfd() {
    var="$(yay -Slaq | fzf --height "100%" --multi --preview "yay -Si {1}" --preview-window "right:70%" --prompt "pkg ")"
    [ -n "$var" ] && echo "$var" | clipbd
    devar; return 0
}
fi
